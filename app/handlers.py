from aiogram import F, Router, types, Bot
from aiogram.types import Message, InputFile
from aiogram.filters import CommandStart, Command
from rembg import remove
from PIL import Image
import logging
import io
from aiogram.fsm.context import FSMContext
from g4f.client import Client
import asyncio

import app.keyboards as kb
import app.states as st

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è —Å–∞–º—ã–π –ª—É—á—à–∏–π –±–æ—Ç –ò–ª—é—à–∞ –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–≤–æ–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', reply_markup=kb.main)


@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏')


@router.message(F.text == '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê—Ä—Å–µ–Ω–∏–π')
async def pidor_found(message: Message):
    await message.answer('–ü–æ—à–µ–ª –Ω–∞—Ö—É–π')


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@router.message(F.text == '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–Ω–µ–≥–æ —Ñ–æ–Ω–∞')
async def remove_background_text(message: Message, state: FSMContext):
    await state.set_state(st.mode.delete_background)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞')


@router.message(F.text == '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
async def remove_background_text(message: Message, state: FSMContext):
    await state.set_state(st.mode.generate_image)
    await message.answer('–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å')


@router.message(st.mode.delete_background)
async def remove_background(message: Message, bot: Bot, state: FSMContext):
    try: 
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        download_file = await bot.download_file(file_info.file_path)

        input_image = Image.open(io.BytesIO(download_file.read()))
        output_image = remove(input_image)

        output_buffer = io.BytesIO()
        output_image.save(output_buffer, format="PNG", quality=100)
        output_buffer.seek(0)

        result_file = types.BufferedInputFile(
            file=output_buffer.getvalue(),
            filename="no_bg.png"
        )

        await message.reply_photo(result_file)
        logger.info("–§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

        await message.reply_document(
            document=result_file,
            caption="–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º üñºÔ∏è"
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–∏–Ω–æ–≤–∞—Ç –ù–∏–∫–æ–ª–∞–π –ë–∞—É–ª–º–æ—Å–æ–≤")


@router.message(st.mode.generate_image)
async def create_image(message: Message, state: FSMContext):
    try:
        def sync_generate_image():
            client = Client()

            promt_translate = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": f"–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏ —Ç–µ–±–µ –Ω–∞–¥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ç —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: {message.text}. –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –¥–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –ø—Ä–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"}]
            )
            logger.info(promt_translate.choices[0].message.content)
            return client.images.generate(
                model="flux",
                prompt=promt_translate.choices[0].message.content,
                response_format="url"
            )

        response = await asyncio.to_thread(sync_generate_image)

        await message.answer(response.data[0].url)
        logger.info("–§–æ—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")