from aiogram import F, Router, types, Bot
from aiogram.types import Message, InputFile, ReplyKeyboardRemove, CallbackQuery
from aiogram.filters import CommandStart, Command
from rembg import remove
from PIL import Image
import logging
import io
from aiogram.fsm.context import FSMContext
from g4f.client import Client
import asyncio

import app.keyboards as kb
import app.states as st

router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏')


@router.message(F.text == '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê—Ä—Å–µ–Ω–∏–π')
async def pidor_found(message: Message):
    await message.answer('–ü–æ—à–µ–ª –Ω–∞—Ö—É–π')


@router.message(CommandStart())
async def start_bot(message: Message):
    #–≤—Ä–µ–º–µ–Ω–Ω–æ —á—Ç–æ–±—ã —É –≤—Å–µ—Ö —É—à–ª–∞ —Å—Ç–∞—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –±–æ—Ç–µ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Å–æ–∑–¥–∞–Ω–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)


@router.callback_query(F.data == 'return_mm')
async def return_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()

    await callback.answer('–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await callback.message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.main)


@router.message(st.Gen.wait)
async def stop_flood(message: Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è')


@router.callback_query(F.data == 'remove_bg')
async def remove_background_text(callback: CallbackQuery, state: FSMContext):
    await state.set_state(st.mode.delete_background)

    await callback.answer('–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–Ω–µ–≥–æ —Ñ–æ–Ω–∞')
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"', reply_markup=kb.return_to_main_menu)


@router.callback_query(F.data == 'generate_image')
async def remove_background_text(callback: CallbackQuery, state: FSMContext):
    await state.set_state(st.mode.generate_image)

    await callback.answer('–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ')
    await callback.message.answer('–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"', reply_markup=kb.return_to_main_menu)


@router.message(st.mode.delete_background)
async def remove_background(message: Message, bot: Bot, state: FSMContext):
    try: 
        await state.set_state(st.Gen.wait)

        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        download_file = await bot.download_file(file_info.file_path)

        input_image = Image.open(io.BytesIO(download_file.read()))
        output_image = remove(input_image)

        output_buffer = io.BytesIO()
        output_image.save(output_buffer, format="PNG", quality=100)
        output_buffer.seek(0)

        result_file = types.BufferedInputFile(
            file=output_buffer.getvalue(),
            filename="no_bg.png"
        )

        await message.reply_photo(result_file)
        logger.info("–§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")

        await message.reply_document(
            document=result_file,
            caption="–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º üñºÔ∏è"
        )
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ', reply_markup=kb.return_to_main_menu)
        

    except AttributeError as e:
        if "'NoneType'" in str(e):
            await message.answer('–û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ')
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–∞: {e}")
            await message.reply("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
    except TypeError as e:
        if "'NoneType'" in str(e):
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ')
        else:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–∏–ø–∞: {e}")
            await message.reply("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
            
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞")

    await state.set_state(st.mode.delete_background)


@router.message(st.mode.generate_image)
async def create_image(message: Message, state: FSMContext):
    try:
        await state.set_state(st.Gen.wait)
        def sync_generate_image():
            client = Client()

            promt_translate = client.chat.completions.create(
                model="gpt-4o",
                messages=[{"role": "user", "content": f"–¢—ã –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏ —Ç–µ–±–µ –Ω–∞–¥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–æ—Ç —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: {message.text}. –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –¥–∞–π —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –ø—Ä–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"}]
            )
            logger.info(promt_translate.choices[0].message.content)
            return client.images.generate(
                model="flux",
                prompt=promt_translate.choices[0].message.content,
                response_format="url"
            )

        response = await asyncio.to_thread(sync_generate_image)
        

        await message.answer(response.data[0].url)
        await message.answer('–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"', reply_markup=kb.return_to_main_menu)
        logger.info("–§–æ—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

    await state.set_state(st.mode.generate_image)